#version 460
#extension GL_EXT_debug_printf : require

#define M_PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=0, binding = 0, r32f) readonly uniform image2DArray input_f;
layout(set=0, binding = 1, r32f) writeonly uniform image2DArray output_f;

layout(set=0, binding = 2, r8ui) uniform uimage2D type_mask;

layout(push_constant) uniform PushConstants {
    vec2 mouse_pos;
    vec2 mouse_delta;
    bool init;
    float dissipation;
} push_constants;

const uint FLUID = 0;
const uint WALL = 1;

const uint SINK = 6;

const int N = 9;

const ivec2 c[9] = {
    ivec2(0,0),
    ivec2(1,0),
    ivec2(0,1),
    ivec2(-1,0),
    ivec2(0,-1),
    ivec2(1,1),
    ivec2(-1,1),
    ivec2(1,-1),
    ivec2(-1,-1),
};

const float W[9] = {
    4.0/9.0,
    1.0/9.0,
    1.0/9.0,
    1.0/9.0,
    1.0/9.0,
    1.0/36.0,
    1.0/36.0,
    1.0/36.0,
    1.0/36.0,
};

const uint opp[9] = {
    0, 3, 4, 1, 2, 8, 7, 6, 5
};

float f_eq(int i, float rho, vec2 p) {
    vec2 u = p / rho;
    
    return W[i] * rho * (2 - sqrt(1 + 3 * u.x * u.x) ) * (2-sqrt(1+3*u.y*u.y)) * pow((2*u.x + sqrt(1 + 3*u.x*u.x)) / (1-u.x), c[i].x) * pow((2 * u.y + sqrt(1+ 3 * u.y *u.y)) / (1-u.y), c[i].y);
}
       
const float beta = 0.99;
const float brush_size = 10;
const float brush_strength = 0.01;


void main() {
    ivec2 dims = imageSize(input_f).xy;
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);

    if(pixel_pos.x >= dims.x || pixel_pos.y >= dims.y) return;

    vec2 pos = vec2(pixel_pos) / dims.y;

    uint type;
    float f [N];
    float rho = 0.0;
    vec2 p = vec2(0);

    if(push_constants.init) {
        float rho_init = 1.0;
        vec2 u_init = vec2(0, 0);

        //u_init = 0.1 * vec2(cos(pos.x * 2 * M_PI) * sin(pos.y * 2 * M_PI), -sin(pos.x * 2 * M_PI) * cos(pos.y * 2 * M_PI));

        type = FLUID;

        if(length(pos - vec2(0.5)) < 0.05 || pixel_pos.x ==0 || pixel_pos.x == dims.x-1) {
            type = WALL;
        }

        for(int i = 0; i < N; i++) {
            f[i] = f_eq(i, rho_init, rho_init * u_init);
            rho += f[i];
            p += c[i] * f[i];
        }

        imageStore(type_mask, pixel_pos, uvec4(type));
    }
    else {
        type = imageLoad(type_mask, pixel_pos).r;

        if(type == FLUID) {
            for(int i = 0; i < N; i++) {
                f[i] = imageLoad(input_f, ivec3(pixel_pos, i)).r;
                rho += f[i];
                p += c[i] * f[i];
            }
        }
    }

    if(type == FLUID) { 
        if(length(push_constants.mouse_pos - pos) <= brush_size / dims[1]) {
            vec2 delta_u = brush_strength * push_constants.mouse_delta;

            if(dot(p / rho, delta_u) / length(delta_u) < 0.5) { 
                p = p + rho * delta_u;
            }
        }

        for(int i = 0; i < N; i++) {
            ivec2 neighbour_pos = (pixel_pos + dims + c[i]) % dims;

            uint neighbor_type = imageLoad(type_mask, neighbour_pos).r;

            float f_next = max(f[i] + 2 * beta * (f_eq(i, rho, p) - f[i]), 0);

            if(neighbor_type == FLUID) {
                
                imageStore(output_f, ivec3(neighbour_pos, i), vec4(f_next,0,0,0));
            } else if(neighbor_type == WALL) {
                imageStore(output_f, ivec3(pixel_pos, opp[i]), vec4(f_next,0,0,0));
            }
        }
    }
}